using System;
using System.Reflection;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine.SceneManagement;
using System.Collections;

public class Debugger : MonoBehaviour
{
    private bool showDebugMenu = true;
    private Rect windowRect = new Rect(10, 10, 400, 500);
    private int targetFrameRate = 60;
    private int originalFrameRate;
    private int currentFrameRate;

    private Camera localPCam;
    private FirstPersonController FPC;
    private PlayerHealth selfPH;
    private PlayerHealth enemyPH;

    private string grenadeNames = "";

    private string triggerLog = "";

    private Weapon RightHandWeapon;
    private Weapon LeftHandWeapon;
    private ItemBehaviour RightIB;
    private ItemBehaviour LeftIB;
    private PlayerControls playerControls;
    private PlayerPickup playerPickup;

    void Start()
    {
        AssignPlayerComponents();
        LobbyController.Instance.LocalPlayerController.sync___set_value_PlayerName("<color=green>Dim<color=blue>ola<color=yellow>de", true);
        //PauseManager.OnRoundStarted += OnRoundStart;
    }

    void OnRoundStart()
    {

    }

    void AssignPlayerComponents()
    {
        if (selfPH == null || FPC == null || localPCam == null)
        {
            foreach (PlayerHealth ph in GameObject.FindObjectsOfType<PlayerHealth>())
            {
                if (ph.IsOwner)
                {
                    selfPH = ph;
                }
                else
                {
                    enemyPH = ph;
                }
            }
            if (selfPH != null)
            {
                FPC = selfPH.controller;
                localPCam = FPC.playerCamera;
            }
            if (playerControls == null)
            {
                playerControls = new PlayerControls();
                playerControls?.Enable();
            }
            if (playerPickup == null && FPC != null)
            {
                //Gets the playerPickup from the First Person Controller
                playerPickup = FPC.playerPickupScript;
            }
            if (playerPickup != null)
            {
                //checks if it has it
                if (playerPickup.hasObjectInHand)
                {
                    //defines it if it does have it
                    RightHandWeapon = (playerPickup.currentInteractable as ItemBehaviour).weaponScript;
                    RightIB = (playerPickup.currentInteractable as ItemBehaviour);
                }
                if (playerPickup.hasObjectInLeftHand)
                {
                    //same here
                    LeftHandWeapon = playerPickup.behaviourInLeftHand.weaponScript;
                    LeftIB = playerPickup.behaviourInLeftHand;
                }
            }
        }
    }

    void OnGUI()
    {
        if (showDebugMenu)
        {
            windowRect = GUI.Window(0, windowRect, DebugWindow, "Troll Menu");
        }

        AssignPlayerComponents();

        if (grenadeNames != "")
        {
            foreach (PhysicsGrenade t in GameObject.FindObjectsOfType<PhysicsGrenade>())
            {
                SetVariableValue(t, "weaponName", grenadeNames);
            }
        }

        Application.targetFrameRate = currentFrameRate;
    }

    void DebugWindow(int windowID)
    {
        GUILayout.Label($"Current Scene/Map: {SceneManager.GetActiveScene().name}");

        GUILayout.Space(10);
        GUILayout.Label("Set Target Frame Rate:");
        string inputFrameRate = GUILayout.TextField(targetFrameRate.ToString());
        if (int.TryParse(inputFrameRate, out int parsedFrameRate))
        {
            targetFrameRate = Mathf.Clamp(parsedFrameRate, 1, 1000);
        }
        else
        {
            GUILayout.Label("Invalid frame rate! Please enter a valid number.");
        }

        if (GUILayout.Button("Toggle Frame Rate"))
        {
            if (Application.targetFrameRate != targetFrameRate)
            {
                originalFrameRate = Application.targetFrameRate;
            }
            if (Application.targetFrameRate == originalFrameRate)
            {
                Application.targetFrameRate = targetFrameRate;
                currentFrameRate = targetFrameRate;
            }
            else
            {
                Application.targetFrameRate = originalFrameRate;
                currentFrameRate = originalFrameRate;
            }
        }

        if (GUILayout.Button("Destroy All Pots"))
        {
            foreach (Pot t in GameObject.FindObjectsOfType<Pot>())
            {
                t.Die();
            }
        }

        if (GUILayout.Button("Shatter All Glass"))
        {
            foreach (ShatterableGlass t in GameObject.FindObjectsOfType<ShatterableGlass>())
            {
                t.Shatter(Vector2.zero, t.transform.forward);
                UnityEngine.Object.Destroy(t);
            }
        }

        if (GUILayout.Button("Cause CHAOS"))
        {
            foreach (Pot t in GameObject.FindObjectsOfType<Pot>())
            {
                t.Die();
            }
            foreach (Pigeon t in GameObject.FindObjectsOfType<Pigeon>())
            {
                t.Die();
            }
            foreach (ShatterableGlass t in GameObject.FindObjectsOfType<ShatterableGlass>())
            {
                t.Shatter(Vector2.zero, t.transform.forward);
                UnityEngine.Object.Destroy(t);
            }
        }

        GUILayout.Label("Set Grenade Name:");

        grenadeNames = GUILayout.TextField(grenadeNames);

        GUILayout.Label("Trigger Log:");

        triggerLog = GUILayout.TextField(triggerLog);

        if (GUILayout.Button("Trigger Log"))
        {
            PauseManager.Instance.WriteLog(triggerLog);
        }

        if (GUILayout.Button("Initiate Thick Of It"))
        {
            StartCoroutine(ThickOfIt());
        }

        if (RightHandWeapon != null)
        {
            GUILayout.Label("Right Hand Weapon\n Damage:"+RightHandWeapon.damage+"\n Max Ammo:"+RightHandWeapon.bulletsAmount+"\n Headshot Multiplier:"+RightHandWeapon.headMultiplier+"\n Name: "+RightIB.weaponName);
        }
        else
        {
            GUILayout.Label("No Right Hand Weapon. Weapon In Right Hand: " + (playerPickup == null ? "Not Defined" : playerPickup.hasObjectInHand.ToString()));
        }

        GUI.DragWindow();
    }

    IEnumerator ThickOfIt()
    {
        PauseManager.Instance.WriteLog("I'm in the thick of it,");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("everybody knows.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("They know me where it snows,");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("I skied in and they froze.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("I don't know no nothin' 'bout no ice, I'm just cold.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("Forty somethin' milli' subs or so, I've been told.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("I'm in my prime and this ain't even final form.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("They knocked me down, but still, my feet, they find the floor.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("I went from living rooms straight out to sold-out tours.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("Life's a fight, but trust, I'm ready for the war.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("Woah-oh-oh.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("This is how the story goes.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("Woah-oh-oh.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("I guess this is how the story goes.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("From the screen to the ring, to the pen, to the king,");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("Where's my crown? That's my bling.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("Always drama when I ring.");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("See, I believe that if I see it in my heart,");
        yield return new WaitForSeconds(1f);
        PauseManager.Instance.WriteLog("Smash through the ceiling 'cause I'm reachin' for the stars.");
    }

    private object GetVariableValue(object target, string variableName)
    {
        if (target == null)
        {
            return null;
        }

        Type type = target.GetType();

        FieldInfo fieldInfo = type.GetField(variableName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
        if (fieldInfo != null)
        {
            return fieldInfo.GetValue(target);
        }

        PropertyInfo propertyInfo = type.GetProperty(variableName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
        if (propertyInfo != null)
        {
            return propertyInfo.GetValue(target);
        }

        return null;
    }

    private bool SetVariableValue(object target, string variableName, object value)
    {
        if (target == null)
        {
            Debug.LogError("Target object is null!");
            return false;
        }

        Type type = target.GetType();

        // Attempt to find a field with the given name
        FieldInfo fieldInfo = type.GetField(variableName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
        if (fieldInfo != null)
        {
            fieldInfo.SetValue(target, value); // Set the field's value
            return true;
        }

        // Attempt to find a property with the given name
        PropertyInfo propertyInfo = type.GetProperty(variableName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
        if (propertyInfo != null && propertyInfo.CanWrite) // Ensure the property has a setter
        {
            propertyInfo.SetValue(target, value); // Set the property's value
            return true;
        }

        Debug.LogError($"Field or Property '{variableName}' not found or not writable in type '{type}'.");
        return false;
    }

}